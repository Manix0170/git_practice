class Pokemon():
  def __init__(self, name, level, p_type):
    self.name = name
    self.level = level
    self.p_type = p_type
    self.health = 100 * level
    self.max_health = 100 * level
    self.exp = 0
    self.max_exp = 5 * level
    self.knocked_down = False

  def knocked_out(self):
    self.knocked_down = True
    self.health = 0
    print("{name} is knocked down.".format(name = self.name))

  def lose_health(self, lose_health):
    self.health -= lose_health
    if self.health > 0:
      print("{name} receive a HIT! Health is {health}".format(name=self.name, health=self.health))
    else:
      self.knocked_out()
    

  def gain_health (self, add_health):
    self.health += add_health
    if self.knocked_down == True:
      self.health = 0
      print("{name} is KO!!! Yo should first revive Pokemon".format(name=self.name))
    elif self.health < self.max_health:
      print("{name} recovered health point, now have {health} health points".format(name=self.name, health=self.health))
    else:
      self.health = self.max_health
      print("{name} recovered MAX health point, now have {health} health points".format(name=self.name, health=self.health))
  
  def revive(self):
    self.knocked_down = False
    self.health = 100
    print ("{name} has Revive!!!".format(name = self.name))
    print ("{name} current health: {health}".format(name = self.name, health = self.health))
      
  def attack(self, other_pokemon, ind = 20):
    if self.knocked_down == True or other_pokemon.knocked_down == True:
      print("One of Pokemon's are KO, attack is not possible.")
      damage = 0
    elif self.p_type == "Fire" and other_pokemon.p_type == "Grass":
      damage = 2 * self.level * ind
      print( self.name+" attack " + other_pokemon.name +" for "+str(damage))
      self.exp_up()
    elif self.p_type == "Water" and other_pokemon.p_type == "Fire":
      damage = 2 * self.level * ind
      print( self.name+" attack " + other_pokemon.name +" for "+str(damage))
      self.exp_up()
    elif self.p_type == "Grassr" and other_pokemon.p_type == "Water":
      damage = 2 * self.level * ind
      print( self.name+" attack " + other_pokemon.name +" for "+str(damage))
      self.exp_up()
    else:
      damage = (self.level*ind)/2
      print( self.name+" attack " + other_pokemon.name +" for "+str(damage))
      self.exp_up()
    other_pokemon.lose_health(damage)
    print( other_pokemon.name +" health points left: "+str(other_pokemon.health))
    
  def exp_up(self):
    self.exp+=1
    if self.exp < self.max_exp:
      print("{name} recive new exp points. Total exp ponits is {exp}.".format(name=self.name, exp=self.exp))
    else:
      self.exp = 0
      self.level+= 1
      print("Congratlations {name} level up!!!. New level is {lvl}.".format(name=self.name, lvl=self.level))

class Trainer(): 
  def __init__(self, name, pokemons, potions, current_pokemon):
    self.name = name
    self.pokemons = pokemons
    self.potions = potions
    self.current_pokemon = current_pokemon
    print("Trainer is create")

  def potion(self):
    self.potions -=1
    pokemon = self.current_pokemon
    pokemon.gain_health(10)
    print("Your Pokemon health by 10")

  def attack_other_trainer(self, other_trainer):
    their_pokemon =other_trainer.current_pokemon
    print( "You attack "+str(their_pokemon.name))
    return self.current_pokemon.attack(their_pokemon)
    
  def switch_pokemon(self, user_choose):
    if self.pokemons[user_choose].is_knocked_out == False:
      self.current_pokemon = self.pokemons[user_choose]
      print("You switch a pokemon on "+ str(self.current_pokemon.name))
    else:
      print("Pokemon is ko, choose another one")
    
#a = Pokemon("Magda", 1, "Fire")
#b = Pokemon("Damian", 1,"Grass")
#c = Pokemon("Ola", 20, 100,100,"Water")
#trainer_one = Trainer("Alex", [a,b,c], 3, a )
#trainer_two = Trainer("Fred", [a,b,c], 3, b )

#a.attack(b)
#trainer_two.potion()
#trainer_one.attack_other_trainer(trainer_two)
#trainer_one.switch_pokemon(1)
#trainer_two.attack_other_trainer(trainer_one)